#include <iostream>
#include <fmt/core.h>
#include <tgbot/tgbot.h>
#include <thread>
#include <vector>
#include <queue>
#include <condition_variable>
#include <mutex>
#include <atomic>
#include <functional>
#include "utils/ThreadPool/ThreadPool.h" 

int main() {
    std::string version = "1.0.0";

    fmt::print("[TICKER-PULSE-BOT]: started, version: {}\n", version);

    // API –∫–ª—é—á
    TgBot::Bot bot("");

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤ —Å 2 –ø–æ—Ç–æ–∫–∞–º–∏
    ThreadPool pool(2);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.getEvents().onCommand("start", [&bot](TgBot::Message::Ptr message) {
        TgBot::InlineKeyboardMarkup::Ptr keyboard(new TgBot::InlineKeyboardMarkup);

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        TgBot::InlineKeyboardButton::Ptr button1(new TgBot::InlineKeyboardButton);
        button1->text = "üìâ –ö—É—Ä—Å –≤–∞–ª—é—Ç";
        button1->callbackData = "ACTUAL";

        // TgBot::InlineKeyboardButton::Ptr button2(new TgBot::InlineKeyboardButton);
        // button2->text = "‚¨ÜÔ∏è –í—ã–±—Ä–∞—Ç—å";
        // button2->callbackData = "SELECT_CURRENCY";

        TgBot::InlineKeyboardButton::Ptr button3(new TgBot::InlineKeyboardButton);
        button3->text = "‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã";
        button3->callbackData = "ATIONS";

        TgBot::InlineKeyboardButton::Ptr button4(new TgBot::InlineKeyboardButton);
        button4->text = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è";
        button4->callbackData = "INFO";

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—ã
        keyboard->inlineKeyboard.push_back({button1});
        keyboard->inlineKeyboard.push_back({button3, button4});

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.getApi().sendMessage(message->chat->id, "üìä –ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. üöÄ", false, 0, keyboard);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.getEvents().onAnyMessage([&bot, &pool](TgBot::Message::Ptr message) {
        printf("User wrote %s\n", message->text.c_str());
        if (StringTools::startsWith(message->text, "/start")) {
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        pool.enqueueTask([&bot, message]() {
            bot.getApi().sendMessage(message->chat->id, "Your message is: " + message->text);
        });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–¥–∞–Ω–Ω—ã—Ö
    bot.getEvents().onCallbackQuery([&bot](TgBot::CallbackQuery::Ptr callbackQuery) {
        if (callbackQuery->data == "ACTUAL") {
            bot.getApi().sendMessage(callbackQuery->message->chat->id, "–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Ç–æ–ø–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"); // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
        } else if (callbackQuery->data == "SELECT_CURRENCY") {
            bot.getApi().sendMessage(callbackQuery->message->chat->id, "–í—ã–∑–æ–≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"); // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
        } else if (callbackQuery->data == "ATIONS") {
            bot.getApi().sendMessage(callbackQuery->message->chat->id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞");
        } else if (callbackQuery->data == "INFO") {
            bot.getApi().sendMessage(callbackQuery->message->chat->id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã.");
        }
    });

    try {
        // –ü–µ—á–∞—Ç—å –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        printf("[TICKER-PULSE-BOT]: TG username - %s\n", bot.getApi().getMe()->username.c_str());

        // –ó–∞–ø—É—Å–∫ Long Polling
        TgBot::TgLongPoll longPoll(bot);
        while (true) {
            printf("[TICKER-PULSE-BOT]: Long poll started\n");
            longPoll.start();
        }
    } catch (TgBot::TgException& e) {
        printf("[TICKER-PULSE-BOT]: %s\n", e.what());
    }

    return 0;
}
