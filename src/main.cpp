#include <iostream>
#include <fmt/core.h>
#include <tgbot/tgbot.h>
#include <thread>
#include <vector>
#include <queue>
#include <condition_variable>
#include <mutex>
#include <atomic>
#include <functional>
#include "utils/ThreadPool/ThreadPool.h" 

int main() {
    std::string version = "1.0.0";

    fmt::print("[TICKER-PULSE-BOT]: started, version: {}\n", version);

    // API –∫–ª—é—á
    TgBot::Bot bot("API_KEY");

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤ —Å 2 –ø–æ—Ç–æ–∫–∞–º–∏
    ThreadPool pool(2);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.getEvents().onCommand("start", [&bot](TgBot::Message::Ptr message) {
        bot.getApi().sendMessage(message->chat->id, "üìä –ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. üöÄ");
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.getEvents().onAnyMessage([&bot, &pool](TgBot::Message::Ptr message) {
        printf("User wrote %s\n", message->text.c_str());
        if (StringTools::startsWith(message->text, "/start")) {
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        pool.enqueueTask([&bot, message]() {
            bot.getApi().sendMessage(message->chat->id, "Your message is: " + message->text);
        });
    });

    try {
        // –ü–µ—á–∞—Ç—å –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        printf("[TICKER-PULSE-BOT]: TG username - %s\n", bot.getApi().getMe()->username.c_str());

        // –ó–∞–ø—É—Å–∫ Long Polling
        TgBot::TgLongPoll longPoll(bot);
        while (true) {
            printf("[TICKER-PULSE-BOT]: Long poll started\n");
            longPoll.start();
        }
    } catch (TgBot::TgException& e) {
        printf("[TICKER-PULSE-BOT]: %s\n", e.what());
    }

    return 0;
}