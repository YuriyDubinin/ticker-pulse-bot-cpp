#include <string>
#include "bot.h"
#include "global_config.h"
#include "bot.h"

Bot::Bot(const std::string& token, int threadCount)
    : bot(token), pool(threadCount) {};

void Bot::start() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.getEvents().onCommand("start", [this](TgBot::Message::Ptr message) {
        onStartCommand(message);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.getEvents().onAnyMessage([this](TgBot::Message::Ptr message) {
        onAnyMessage(message);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–¥–∞–Ω–Ω—ã—Ö
    bot.getEvents().onCallbackQuery([this](TgBot::CallbackQuery::Ptr callbackQuery) {
        onCallbackQuery(callbackQuery);
    });

    try {
        // –ü–µ—á–∞—Ç—å –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        fmt::print("[TICKER-PULSE-BOT]: TG username - {}\n", bot.getApi().getMe()->username);

        // –ó–∞–ø—É—Å–∫ Long Polling
        TgBot::TgLongPoll longPoll(bot);
        while (true) {
            fmt::print("[TICKER-PULSE-BOT]: Long poll started\n");
            longPoll.start();
        }
    } catch (TgBot::TgException& e) {
        fmt::print("[TICKER-PULSE-BOT]: {}\n", e.what());
    }
};

void Bot::onStartCommand(TgBot::Message::Ptr message) {
    TgBot::InlineKeyboardMarkup::Ptr keyboard(new TgBot::InlineKeyboardMarkup);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    TgBot::InlineKeyboardButton::Ptr button1(new TgBot::InlineKeyboardButton);
    button1->text = "üìâ –ö—É—Ä—Å –≤–∞–ª—é—Ç";
    button1->callbackData = "ACTUAL";

    TgBot::InlineKeyboardButton::Ptr button3(new TgBot::InlineKeyboardButton);
    button3->text = "‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã";
    button3->callbackData = "ATIONS";

    TgBot::InlineKeyboardButton::Ptr button4(new TgBot::InlineKeyboardButton);
    button4->text = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è";
    button4->callbackData = "INFO";

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—ã
    keyboard->inlineKeyboard.push_back({button1});
    keyboard->inlineKeyboard.push_back({button3, button4});

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.getApi().sendMessage(message->chat->id, "üìä –ü—Ä–∏–≤–µ—Ç! –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. üöÄ", false, 0, keyboard);
};

void Bot::onAnyMessage(TgBot::Message::Ptr message) {
    fmt::print("User wrote {}\n", message->text);

    if (message->text.find("/start") != 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        pool.enqueueTask([this, message]() {
            bot.getApi().sendMessage(message->chat->id, "Your message is: " + message->text);
        });
    }
};

void Bot::sendToGroup(const std::string& groupId, const std::string& messageText) {
    try {
        bot.getApi().sendMessage(groupId, messageText);
        fmt::print("[TICKER-PULSE-BOT]: Message sent to group {}\n", groupId);
    } catch (TgBot::TgException& e) {
        fmt::print("[TICKER-PULSE-BOT]: Failed to send message to group {}: {}\n", groupId, e.what());
    }
};

void Bot::onCallbackQuery(TgBot::CallbackQuery::Ptr callbackQuery) {
    if (callbackQuery->data == "ACTUAL") { 
        bot.getApi().sendMessage(callbackQuery->message->chat->id, "–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Ç–æ–ø–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: \n");
    } else if (callbackQuery->data == "SELECT_CURRENCY") {
        bot.getApi().sendMessage(callbackQuery->message->chat->id, "–í—ã–∑–æ–≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã");
    } else if (callbackQuery->data == "ATIONS") {
        bot.getApi().sendMessage(callbackQuery->message->chat->id, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞");
    } else if (callbackQuery->data == "INFO") {
        bot.getApi().sendMessage(callbackQuery->message->chat->id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã.");
    }
};
